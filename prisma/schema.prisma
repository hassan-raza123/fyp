generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id               Int               @id @default(autoincrement())
  studentSectionId Int
  sessionId        Int
  status           attendance_status
  markedBy         Int
  remarks          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  user             user              @relation(fields: [markedBy], references: [id], map: "Attendance_markedBy_fkey")
  session          session           @relation(fields: [sessionId], references: [id], map: "Attendance_sessionId_fkey")
  studentsection   studentsection    @relation(fields: [studentSectionId], references: [id], map: "Attendance_studentSectionId_fkey")

  @@unique([studentSectionId, sessionId], map: "Attendance_studentSectionId_sessionId_key")
  @@index([markedBy], map: "Attendance_markedBy_idx")
  @@index([sessionId], map: "Attendance_sessionId_idx")
  @@index([studentSectionId], map: "Attendance_studentSectionId_idx")
}

model auditlog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "AuditLog_userId_fkey")

  @@index([createdAt], map: "AuditLog_createdAt_idx")
  @@index([userId], map: "AuditLog_userId_idx")
}

model course {
  id          Int           @id @default(autoincrement())
  code        String        @unique(map: "Course_code_key")
  name        String
  description String?
  creditHours Int
  programId   Int
  semester    Int
  status      course_status @default(active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  program     program       @relation(fields: [programId], references: [id], map: "Course_programId_fkey")
  section     section[]
  course_A    course[]      @relation("courseprerequisites")
  course_B    course[]      @relation("courseprerequisites")
  faculty     faculty[]     @relation("FacultyCourses")

  @@index([programId], map: "Course_programId_idx")
}

model department {
  id                 Int               @id @default(autoincrement())
  name               String
  code               String            @unique
  description        String?
  status             department_status @default(active)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  adminId            Int?

  // Relations
  admin            user?        @relation("DepartmentAdmin", fields: [adminId], references: [id])
  programs         program[]
  faculty          faculty[]
  students         student[]

  @@map("departments")
}

model faculty {
  id           Int            @id @default(autoincrement())
  designation  String
  status       faculty_status @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       Int            @unique
  departmentId Int

  // Relations
  user       user       @relation(fields: [userId], references: [id])
  department department @relation(fields: [departmentId], references: [id])
  courses    course[]   @relation("FacultyCourses")
  sections   section[]

  @@map("faculty")
}

model notification {
  id        Int               @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean           @default(false)
  type      notification_type
  createdAt DateTime          @default(now())
  updatedAt DateTime
  user      user              @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_idx")
}

model passwordreset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique(map: "PasswordReset_token_key")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user     @relation(fields: [userId], references: [id], map: "PasswordReset_userId_fkey")

  @@index([token], map: "PasswordReset_token_idx")
  @@index([userId], map: "PasswordReset_userId_idx")
}

model permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "Permission_name_key")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  roles       role[]   @relation("permissiontorole")
}

model program {
  id           Int            @id @default(autoincrement())
  name         String
  code         String         @unique
  description  String?
  duration     Int
  status       program_status @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  departmentId Int

  // Relations
  department department @relation(fields: [departmentId], references: [id])
  courses    course[]
  students   student[]

  @@map("programs")
}

model role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles   userrole[]
  permissions permission[] @relation("permissiontorole")

  @@map("roles")
}

model section {
  id             Int              @id @default(autoincrement())
  name           String
  courseId       Int
  facultyId      Int?
  semester       Int
  maxStudents    Int
  status         section_status   @default(active)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  course         course           @relation(fields: [courseId], references: [id], map: "Section_courseId_fkey")
  faculty        faculty?         @relation(fields: [facultyId], references: [id], map: "Section_facultyId_fkey")
  session        session[]
  studentsection studentsection[]
  timetableslot  timetableslot[]

  @@index([courseId], map: "Section_courseId_idx")
  @@index([facultyId], map: "Section_facultyId_idx")
}

model session {
  id         Int            @id @default(autoincrement())
  sectionId  Int
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  topic      String?
  remarks    String?
  status     session_status @default(scheduled)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime
  attendance attendance[]
  section    section        @relation(fields: [sectionId], references: [id], map: "Session_sectionId_fkey")

  @@index([sectionId], map: "Session_sectionId_idx")
}

model student {
  id           Int            @id @default(autoincrement())
  rollNumber   String         @unique
  status       student_status @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       Int            @unique
  departmentId Int
  programId    Int

  // Relations
  user           user             @relation(fields: [userId], references: [id])
  department     department       @relation(fields: [departmentId], references: [id])
  program        program          @relation(fields: [programId], references: [id])
  studentsection studentsection[]

  @@map("students")
}

model studentsection {
  id             Int                   @id @default(autoincrement())
  studentId      Int
  sectionId      Int
  enrollmentDate DateTime              @default(now())
  status         studentsection_status @default(active)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime
  attendance     attendance[]
  section        section               @relation(fields: [sectionId], references: [id], map: "StudentSection_sectionId_fkey")
  student        student               @relation(fields: [studentId], references: [id], map: "StudentSection_studentId_fkey")

  @@unique([studentId, sectionId], map: "StudentSection_studentId_sectionId_key")
  @@index([sectionId], map: "StudentSection_sectionId_idx")
  @@index([studentId], map: "StudentSection_studentId_idx")
}

model timetableslot {
  id         Int                  @id @default(autoincrement())
  sectionId  Int
  dayOfWeek  Int
  startTime  DateTime             @db.Time(0)
  endTime    DateTime             @db.Time(0)
  roomNumber String?
  status     timetableslot_status @default(active)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime
  section    section              @relation(fields: [sectionId], references: [id], map: "TimetableSlot_sectionId_fkey")

  @@index([sectionId], map: "TimetableSlot_sectionId_idx")
}

model user {
  id             Int         @id @default(autoincrement())
  username       String?     @unique(map: "User_username_key")
  email          String      @unique(map: "User_email_key")
  password_hash  String
  first_name     String
  last_name      String
  phone_number   String?
  profile_image  String?
  status         user_status @default(active)
  last_login     DateTime?
  email_verified Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  attendance          attendance[]
  auditlog            auditlog[]
  departmentAdmin     department[]         @relation("DepartmentAdmin")
  faculty             faculty[]
  notification        notification[]
  passwordreset       passwordreset[]
  student             student[]
  userrole            userrole[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model userrole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user user @relation(fields: [userId], references: [id])
  role role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String
  userType  String
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, userType])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum role_name {
  super_admin
  sub_admin
  department_admin
  child_admin
  teacher
  student
}

enum attendance_status {
  present
  absent
  late
  leave
  excused
}

enum studentsection_status {
  active
  inactive
  suspended
  deleted
}

enum notification_type {
  system
  attendance
  course
  announcement
  alert
}

enum department_status {
  active
  inactive
}

enum faculty_status {
  active
  inactive
}

enum section_status {
  active
  inactive
  suspended
  deleted
}

enum timetableslot_status {
  active
  inactive
  suspended
  deleted
}

enum course_status {
  active
  inactive
}

enum program_status {
  active
  inactive
}

enum session_status {
  scheduled
  in_progress
  completed
  cancelled
  postponed
}

enum user_status {
  active
  inactive
}

enum student_status {
  active
  inactive
}

enum enrollment_status {
  active
  inactive
}

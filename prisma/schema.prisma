generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendances {
  id               Int               @id @default(autoincrement())
  studentSectionId Int
  sessionId        Int
  status           attendance_status
  markedBy         Int
  remarks          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             users             @relation(fields: [markedBy], references: [id], map: "Attendances_markedBy_fkey")
  session          sessions          @relation(fields: [sessionId], references: [id], map: "Attendances_sessionId_fkey")
  studentsection   studentsections   @relation(fields: [studentSectionId], references: [id], map: "Attendances_studentSectionId_fkey")

  @@unique([studentSectionId, sessionId], map: "Attendances_studentSectionId_sessionId_key")
  @@index([markedBy], map: "Attendances_markedBy_idx")
  @@index([sessionId], map: "Attendances_sessionId_idx")
  @@index([studentSectionId], map: "Attendances_studentSectionId_idx")
}

model auditlogs {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], map: "AuditLogs_userId_fkey")

  @@index([createdAt], map: "AuditLogs_createdAt_idx")
  @@index([userId], map: "AuditLogs_userId_idx")
}

model courses {
  id             Int           @id @default(autoincrement())
  code           String        @unique(map: "Courses_code_key")
  name           String
  description    String?
  creditHours    Int
  labHours       Int
  theoryHours    Int
  type           course_type
  status         course_status @default(active)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  departmentId   Int
  department     departments   @relation("DepartmentToCourse", fields: [departmentId], references: [id])
  sections       sections[]
  prerequisites  courses[]     @relation("CoursePrerequisites")
  requiredBy     courses[]     @relation("CoursePrerequisites")
  faculties      faculties[]   @relation("FacultyCourses")
  programs       programs[]    @relation("ProgramToCourse")

  @@index([departmentId], map: "Courses_departmentId_idx")
}

model departments {
  id          Int               @id @default(autoincrement())
  name        String
  code        String            @unique
  description String?
  status      department_status @default(active)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  adminId     Int?              @unique
  courses     courses[]         @relation("DepartmentToCourse")
  admin       users?            @relation("DepartmentAdmin", fields: [adminId], references: [id])
  faculties   faculties[]
  programs    programs[]
  students    students[]

  @@index([adminId], map: "Departments_adminId_fkey")
}

model faculties {
  id           Int            @id @default(autoincrement())
  userId       Int            @unique
  departmentId Int
  designation  String
  status       faculty_status @default(active)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  department   departments    @relation(fields: [departmentId], references: [id])
  user         users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections     sections[]
  courses      courses[]      @relation("FacultyCourses")

  @@index([departmentId], map: "Faculties_departmentId_fkey")
}

model notifications {
  id        Int               @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean           @default(false)
  type      notification_type
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      users             @relation(fields: [userId], references: [id], map: "Notifications_userId_fkey")

  @@index([userId], map: "Notifications_userId_idx")
}

model passwordresets {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique(map: "PasswordResets_token_key")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id], map: "PasswordResets_userId_fkey")

  @@index([token], map: "PasswordResets_token_idx")
  @@index([userId], map: "PasswordResets_userId_idx")
}

model permissions {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "Permissions_name_key")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       roles[]  @relation("PermissionToRole")
}

model roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userRoles   userroles[]
  permissions permissions[] @relation("PermissionToRole")
}

model sections {
  id             Int              @id @default(autoincrement())
  name           String
  courseId       Int
  facultyId      Int?
  semester       Int
  maxStudents    Int
  status         section_status   @default(active)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  course         courses          @relation(fields: [courseId], references: [id], map: "Sections_courseId_fkey")
  faculty        faculties?       @relation(fields: [facultyId], references: [id], map: "Sections_facultyId_fkey")
  sessions       sessions[]
  studentsections studentsections[]
  timetableslots timetableslots[]

  @@index([courseId], map: "Sections_courseId_idx")
  @@index([facultyId], map: "Sections_facultyId_idx")
}

model sessions {
  id          Int            @id @default(autoincrement())
  sectionId   Int
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  topic       String?
  remarks     String?
  status      session_status @default(scheduled)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  attendances attendances[]
  section     sections       @relation(fields: [sectionId], references: [id], map: "Sessions_sectionId_fkey")

  @@index([sectionId], map: "Sessions_sectionId_idx")
}

model students {
  id              Int               @id @default(autoincrement())
  rollNumber      String            @unique
  status          student_status    @default(active)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          Int               @unique
  departmentId    Int
  programId       Int
  batchId         String?
  batch           batches?          @relation("StudentToBatch", fields: [batchId], references: [id])
  department      departments       @relation(fields: [departmentId], references: [id])
  program         programs          @relation(fields: [programId], references: [id])
  user            users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentsections studentsections[]

  @@index([departmentId], map: "Students_departmentId_fkey")
  @@index([programId], map: "Students_programId_fkey")
  @@index([batchId], map: "Students_batchId_fkey")
}

model studentsections {
  id             Int                   @id @default(autoincrement())
  studentId      Int
  sectionId      Int
  enrollmentDate DateTime              @default(now())
  status         studentsection_status @default(active)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  attendances    attendances[]
  section        sections              @relation(fields: [sectionId], references: [id], map: "StudentSections_sectionId_fkey")
  student        students              @relation(fields: [studentId], references: [id], map: "StudentSections_studentId_fkey")

  @@unique([studentId, sectionId], map: "StudentSections_studentId_sectionId_key")
  @@index([sectionId], map: "StudentSections_sectionId_idx")
  @@index([studentId], map: "StudentSections_studentId_idx")
}

model timetableslots {
  id         Int                  @id @default(autoincrement())
  sectionId  Int
  dayOfWeek  Int
  startTime  DateTime             @db.Time(0)
  endTime    DateTime             @db.Time(0)
  roomNumber String?
  status     timetableslot_status @default(active)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  section    sections             @relation(fields: [sectionId], references: [id], map: "TimetableSlots_sectionId_fkey")

  @@index([sectionId], map: "TimetableSlots_sectionId_idx")
}

model users {
  id                 Int                  @id @default(autoincrement())
  username           String?              @unique(map: "Users_username_key")
  email              String               @unique(map: "Users_email_key")
  password_hash      String
  first_name         String
  last_name          String
  phone_number       String?
  profile_image      String?
  status             user_status          @default(active)
  last_login         DateTime?
  email_verified     Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  attendances        attendances[]
  auditlogs          auditlogs[]
  departmentAdmin    departments?         @relation("DepartmentAdmin")
  faculty            faculties?
  notifications      notifications[]
  passwordresets     passwordresets[]
  passwordresettokens passwordresettokens[]
  student            students?
  userrole           userroles?
}

model userroles {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      roles    @relation(fields: [roleId], references: [id])
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId], map: "UserRoles_roleId_fkey")
  @@index([userId], map: "UserRoles_userId_fkey")
}

model otps {
  id        Int      @id @default(autoincrement())
  email     String
  userType  String
  code      String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, userType], map: "OTPs_email_userType_idx")
}

model passwordresettokens {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique(map: "PasswordResetTokens_token_key")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PasswordResetTokens_userId_fkey")

  @@index([userId], map: "PasswordResetTokens_userId_idx")
}

model batches {
  id          String         @id @default(cuid())
  name        String
  code        String         @unique
  startDate   DateTime
  endDate     DateTime
  maxStudents Int
  description String?
  status      batches_status @default(upcoming)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  programId   Int
  program     programs       @relation(fields: [programId], references: [id])
  students    students[]     @relation("StudentToBatch")

  @@index([programId], map: "Batches_programId_fkey")
}

model programs {
  id               Int             @id @default(autoincrement())
  name             String
  code             String          @unique
  description      String?
  duration         Int
  status           programs_status @default(active)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  departmentId     Int
  totalCreditHours Int             @default(0)
  batches          batches[]
  department       departments     @relation(fields: [departmentId], references: [id])
  students         students[]
  courses          courses[]       @relation("ProgramToCourse")

  @@index([departmentId], map: "Programs_departmentId_fkey")
}

enum attendance_status {
  present
  absent
  late
  leave
  excused
}

enum studentsection_status {
  active
  inactive
  suspended
  deleted
}

enum notification_type {
  system
  attendance
  course
  announcement
  alert
}

enum department_status {
  active
  inactive
}

enum faculty_status {
  active
  inactive
}

enum section_status {
  active
  inactive
  suspended
  deleted
}

enum timetableslot_status {
  active
  inactive
  suspended
  deleted
}

enum course_status {
  active
  inactive
  archived
}

enum session_status {
  scheduled
  in_progress
  completed
  cancelled
  postponed
}

enum user_status {
  active
  inactive
}

enum student_status {
  active
  inactive
}

enum course_type {
  THEORY
  LAB
  PROJECT
  THESIS
}

enum programs_status {
  active
  inactive
}

enum batches_status {
  active
  completed
  upcoming
}